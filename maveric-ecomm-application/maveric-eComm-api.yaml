openapi: 3.0.0
info:
  title: Maveric eComm app API
  description: APIs needed to build Maveric eComm App
  version: 1.0.0
servers:
  - url: http://localhost:8000/api/v1
    description: Local server
security:
  - BearerAuth: []
paths:
  /auth/login:
    post:
      summary: Login user based on email and password
      tags:
        - Authentication
      operationId: login
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '201':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
  /auth/signup:
    post:
      summary: Creates a new user.
      tags:
        - Authentication
      operationId: signup
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
  /users:
    parameters:
      - name: page
        in: query
        required: false
        description: Page number
        schema:
          type: integer
          default: 1
      - name: pageSize
        in: query
        required: false
        description: Page size
        schema:
          type: integer
          default: 10
    get:
      summary: Returns a list of users.
      description: Returns a list of users.
      tags:
        - Users
      operationId: getUsers
      responses:
        '200':    # status code
          description: A JSON array of users
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/UserWithoutPassword'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
    post:
      summary: Creates a new user.
      tags:
        - Users
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithoutPassword'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
  /users/{userId}:
    parameters:
      - name: userId
        in: path
        required: true
        description: User Id
        schema:
          type: string
    get:
      summary: Return a user by ID.
      tags:
        - Users
      operationId: getUserDetails
      responses:
        '200':
          description: A user object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithoutPassword'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        default:
          description: Unexpected error
    put:
      summary: Update a user by ID.
      tags:
        - Users
      operationId: updateUser
      requestBody:
        content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: A user object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserWithoutPassword'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        default:
          description: Unexpected error
    delete:
      summary: Delete a user by ID.
      tags:
        - Users
      operationId: deleteUser
      responses:
        '200':
          description: User successfully deleted
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        default:
          description: Unexpected error
  /users/getUserByEmail/{emailId}:
    parameters:
      - name: emailId
        in: path
        required: true
        description: User email Id
        schema:
          type: string
    get:
      summary: Return a user by email.
      tags:
        - Users
      operationId: getUserDetailsByEmail
      responses:
        '200':
          description: A user object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
  /products:
    get:
      parameters:
      - name: page
        in: query
        required: false
        description: Page number
        schema:
          type: integer
          default: 1
      - name: pageSize
        in: query
        required: false
        description: Page size
        schema:
          type: integer
          default: 10
      summary: Returns a list of products.
      description: Returns a list of products.
      tags:
        - Products
      operationId: getProducts
      responses:
        '200':    # status code
          description: A JSON array of products 
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
    post:
      summary: Creates a new post.
      tags:
        - Products
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '201':
          description: Product successfully created
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ProductRequest'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
  /products/{productId}:
    parameters:
      - name: productId
        in: path
        required: true
        description: The ID of the product to return.
        schema:
          type: string
    get:
      summary: Returns a product by ID.
      tags:
        - Products
      operationId: getProductDetails
      responses:
        '200':
          description: Product details for the given productId
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        default:
          description: Unexpected error
    put:
      summary: Update post by ID.
      tags:
        - Products
      operationId: updateProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductRequest'
      responses:
        '200':
          description: Product successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        default:
          description: Unexpected error
    delete:
      summary: Delete post by ID.
      tags:
        - Products
      operationId: deleteProduct
      responses:
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        default:
          description: Unexpected error
  /catalogs:
    get:
      parameters:
        - name: page
          in: query
          required: false
          description: Page number
          schema:
            type: integer
            default: 1
        - name: pageSize
          in: query
          required: false
          description: Page size
          schema:
            type: integer
            default: 10
      summary: Returns a list of catalogs.
      description: Returns a list of catalogs.
      tags:
        - Catalog
      operationId: getComments
      responses:
        '200':    # status code
          description: A JSON array of catalogs
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Catalog'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
    post:
      summary: Create comment on a post
      tags:
        - Catalog
      operationId: createComment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CatalogRequest'
      responses:
        '201':
          description: Multiple choice question created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
  /catalogs/{catalogId}:
    parameters:
      - name: catalogId
        in: path
        required: true
        description: Catalog Id 
        schema:
          type: string
    get:
      summary: Return comment details for the given catalog id.
      tags:
        - Catalog
      operationId: getCatalogDetails
      responses:
        '200':
          description: Getting catalog details was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        default:
          description: Unexpected error
    put:
      summary: Update catalog based on catalog id.
      tags:
        - Catalog
      operationId: updateCatalog
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CatalogRequest'
      responses:
        '200':
          description: Catalog updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        default:
          description: Unexpected error
    delete:
      summary: Delete catalog by id.
      tags:
        - Catalog
      operationId: deleteCatalog
      responses:
        '200':
          description: Catalog deleted successfully.
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        default:
          description: Unexpected error
  /orders:
    get:
      summary: Returns a list of orders.
      description: Returns a list of orders.
      tags:
        - Orders
      operationId: getOrders
      responses:
        '200':    # status code
          description: A JSON array of orders
          content:
            application/json:
              schema: 
                type: array
                items: 
                  $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
    post:
      summary: Creates a new order.
      tags:
        - Orders
      operationId: createOrder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
  /orders/{orderId}:
    parameters:
      - name: orderId
        in: path
        required: true
        description: Order Id.
        schema:
          type: string
    get:
      summary: Returns order details based on order id
      description: Returns order details based on order id
      tags:
        - Orders
      operationId: getOrderDetails
      responses:
        '200':
          description: Getting order details was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
    put:
      summary: Update order details
      tags:
        - Orders
      operationId: updateOrderDetails
      responses:
        '200':
          description: Updating order details was successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        default:
          description: Unexpected error
    delete:
      summary: delete order
      tags:
        - Orders
      operationId: deleteOrder
      responses:
        '200':
          description: Order successfully deleted.
        '400':
          $ref: '#/components/responses/400BadRequest'
        '401':
          $ref: '#/components/responses/401Unauthorized'
        '403':
          $ref: '#/components/responses/403Forbidden'
        '404':
          $ref: '#/components/responses/404NotFound'
        '500':
          $ref: '#/components/responses/500InternalServerError'
        '503':
          $ref: '#/components/responses/503ServiceUnavailable'
        default:
          description: Unexpected error
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    400BadRequest:
      description: The server could not understand the request due to invalid syntax.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    401Unauthorized:
      description: Unauthorized. The client must authenticate itself to get the requested response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    403Forbidden:
      description: The client does not have access rights to the content; that is, it is unauthorized, so the server is refusing to give the requested resource. Unlike 401, the client's identity is known to the server.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    404NotFound:
      description: The server can not find the requested resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    405MethodNotAllowed:
      description: The request method is known by the server but is not supported by the target resource. For example, an API may forbid DELETE-ing a resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    500InternalServerError:
      description: The server has encountered a situation it doesn't know how to handle..
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    503ServiceUnavailable:
      description: The server is not ready to handle the request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    LoginRequest:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          description: JWT token
        user:
          $ref: '#/components/schemas/UserWithoutPassword'
    UserWithoutPassword:
      properties:
        _id:
          type: string
          description: Autogenerated user id. Will be empty for create user request
        firstName:
          type: string
        lastName:
          type: string
        middleName:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
          format: email
        address:
          type: string
        dateOfBirth:
          type: string
          format: date
        gender:
          type: string
          enum: ["MALE", "FEMALE"]
    User:
      type: object
      allOf: # Combines the main `Pet` schema with `Cat`-specific properties 
        - $ref: '#/components/schemas/UserWithoutPassword'
      properties:
        password:
          type: string
          format: password
      required:
        - firstName
        - lastName
        - email
        - phoneNumber
        - password
    ProductRequest:
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        price:
          type: number
          description: Product price
        stockCount:
          type: number
          format: integer
      required:  
        - name
        - description
        - price
        - stockCount  
    Product:
      type: object
      allOf: # Combines the main `Pet` schema with `Cat`-specific properties 
        - $ref: '#/components/schemas/ProductRequest'
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    CatalogRequest:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        images:
          type: array
          items: 
            type: string
    Catalog:
      type: object
      allOf: # Combines the main `Pet` schema with `Cat`-specific properties 
        - $ref: '#/components/schemas/CatalogRequest'
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    OrderItem:
      additionalProperties:
        type: string
      example:
        "12121213": 1
        "23232333": 2
    OrderRequest:
      type: object
      properties:
        _id:
          type: string
        items:
          $ref: '#/components/schemas/OrderItem'
        customerId:
          type: string
          description: Customer Id 
      required:  
        - items
        - customerId
    Order:
      type: object
      properties:
        _id:
          type: string
        status:
          type: string
          enum: ['CREATED', 'CONFIRMED', 'DECLINED', 'DELIVERED']
        items:
          $ref: '#/components/schemas/OrderItem'
        value:
          type: number
          format: float
          description: Total value of the order
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time